// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Modulap.Data;

#nullable disable

namespace Modulap.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Modulap.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Modulap.Models.Buys", b =>
                {
                    b.Property<Guid>("IdBuys")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdminId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateBuys")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdBuys");

                    b.HasIndex("AdminId");

                    b.ToTable("Buys");
                });

            modelBuilder.Entity("Modulap.Models.ChickenCoop", b =>
                {
                    b.Property<Guid>("IdChickenCoop")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvailabilityStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdChickenCoop");

                    b.ToTable("ChickenCoops");
                });

            modelBuilder.Entity("Modulap.Models.Component", b =>
                {
                    b.Property<Guid>("IdComponent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdComponent");

                    b.ToTable("Components");
                });

            modelBuilder.Entity("Modulap.Models.ComponentCosting", b =>
                {
                    b.Property<Guid>("IdComponentCosting")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Average")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ComponentLossId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ComponentLotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ComponentProductionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Entrance")
                        .HasColumnType("int");

                    b.Property<int>("Existence")
                        .HasColumnType("int");

                    b.Property<int>("Exit")
                        .HasColumnType("int");

                    b.Property<decimal>("Owes")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("RecipeDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ToHave")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("cost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdComponentCosting");

                    b.HasIndex("ComponentLossId");

                    b.HasIndex("ComponentLotId");

                    b.HasIndex("ComponentProductionId");

                    b.HasIndex("RecipeDetailId");

                    b.ToTable("ComponentCostings");
                });

            modelBuilder.Entity("Modulap.Models.ComponentLoss", b =>
                {
                    b.Property<Guid>("IdComponentLoss")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdComponentLoss");

                    b.HasIndex("ComponentId");

                    b.ToTable("ComponentLosses");
                });

            modelBuilder.Entity("Modulap.Models.ComponentLot", b =>
                {
                    b.Property<Guid>("IdComponentLot")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("AverageLot")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("BuysId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdComponentLot");

                    b.HasIndex("BuysId");

                    b.HasIndex("ComponentId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ComponentLots");
                });

            modelBuilder.Entity("Modulap.Models.ComponentProduction", b =>
                {
                    b.Property<Guid>("IdComponentProduction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComponentLotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductionLotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuantityUsed")
                        .HasColumnType("int");

                    b.HasKey("IdComponentProduction");

                    b.HasIndex("ComponentLotId");

                    b.HasIndex("ProductionLotId");

                    b.ToTable("ComponentProductions");
                });

            modelBuilder.Entity("Modulap.Models.Estimate", b =>
                {
                    b.Property<Guid>("IdEstimate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Airqualitymonitoring")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Automaticfeeddispenser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ChickenCoopId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChickenCoopLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnvironmentalMonitoring")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naturallightingmonitoring")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NightMotionSensor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicalInstallation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PriceTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuantityChickens")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Waterlevelgauge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("connectiontype")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEstimate");

                    b.HasIndex("ChickenCoopId");

                    b.HasIndex("ClientId");

                    b.ToTable("Estimates");
                });

            modelBuilder.Entity("Modulap.Models.Message", b =>
                {
                    b.Property<Guid>("IdMessage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdministratorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ChickenCoopId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ParentMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StatusMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMessage");

                    b.HasIndex("AdministratorId");

                    b.HasIndex("ChickenCoopId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ParentMessageId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Modulap.Models.PossibleClient", b =>
                {
                    b.Property<Guid>("IdPossibleClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPossibleClient");

                    b.ToTable("PossibleClients");
                });

            modelBuilder.Entity("Modulap.Models.ProductionLot", b =>
                {
                    b.Property<Guid>("idProductionLot")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateProduction")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idProductionLot");

                    b.HasIndex("RecipeId");

                    b.ToTable("ProductionLots");
                });

            modelBuilder.Entity("Modulap.Models.Qualification", b =>
                {
                    b.Property<Guid>("IdQualification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChickenCoopId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("punctuation")
                        .HasColumnType("int");

                    b.HasKey("IdQualification");

                    b.HasIndex("ChickenCoopId");

                    b.HasIndex("ClientId");

                    b.ToTable("Qualifications");
                });

            modelBuilder.Entity("Modulap.Models.Recipe", b =>
                {
                    b.Property<Guid>("IdRecipe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid>("ChickenCoopId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdRecipe");

                    b.HasIndex("ChickenCoopId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("Modulap.Models.RecipeDetail", b =>
                {
                    b.Property<Guid>("IdRecipeDetail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ComponentQuantity")
                        .HasColumnType("int");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdRecipeDetail");

                    b.HasIndex("ComponentId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeDetails");
                });

            modelBuilder.Entity("Modulap.Models.Sale", b =>
                {
                    b.Property<Guid>("IdSale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EstimateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdSale");

                    b.HasIndex("EstimateId");

                    b.HasIndex("UserId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Modulap.Models.SaleDetail", b =>
                {
                    b.Property<Guid>("IdSaleDetail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid?>("ChickenCoopId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SaleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdSaleDetail");

                    b.HasIndex("ChickenCoopId");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleDetails");
                });

            modelBuilder.Entity("Modulap.Models.Supplier", b =>
                {
                    b.Property<Guid>("IdSupplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("IdSupplier");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Modulap.Models.SupplierPayment", b =>
                {
                    b.Property<Guid>("IdSupplierPayment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComponentLotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("amount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdSupplierPayment");

                    b.HasIndex("ComponentLotId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierPayments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Modulap.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Modulap.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modulap.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Modulap.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Modulap.Models.Buys", b =>
                {
                    b.HasOne("Modulap.Models.AppUser", "Administrator")
                        .WithMany("BuysAdmins")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Administrator");
                });

            modelBuilder.Entity("Modulap.Models.ComponentCosting", b =>
                {
                    b.HasOne("Modulap.Models.ComponentLoss", "ComponentLoss")
                        .WithMany("ComponentCostings")
                        .HasForeignKey("ComponentLossId");

                    b.HasOne("Modulap.Models.ComponentLot", "ComponentLot")
                        .WithMany("ComponentCostings")
                        .HasForeignKey("ComponentLotId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Modulap.Models.ComponentProduction", "ComponentProduction")
                        .WithMany("ComponentCostings")
                        .HasForeignKey("ComponentProductionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Modulap.Models.RecipeDetail", "RecipeDetail")
                        .WithMany("ComponentCostings")
                        .HasForeignKey("RecipeDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ComponentLoss");

                    b.Navigation("ComponentLot");

                    b.Navigation("ComponentProduction");

                    b.Navigation("RecipeDetail");
                });

            modelBuilder.Entity("Modulap.Models.ComponentLoss", b =>
                {
                    b.HasOne("Modulap.Models.Component", "Component")
                        .WithMany("ComponentLosses")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");
                });

            modelBuilder.Entity("Modulap.Models.ComponentLot", b =>
                {
                    b.HasOne("Modulap.Models.Buys", "Buys")
                        .WithMany("ComponentLots")
                        .HasForeignKey("BuysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modulap.Models.Component", "Component")
                        .WithMany("ComponentLots")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modulap.Models.Supplier", "Supplier")
                        .WithMany("ComponentLots")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buys");

                    b.Navigation("Component");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Modulap.Models.ComponentProduction", b =>
                {
                    b.HasOne("Modulap.Models.ComponentLot", "ComponentLot")
                        .WithMany("ComponentProductions")
                        .HasForeignKey("ComponentLotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Modulap.Models.ProductionLot", "ProductionLot")
                        .WithMany("ComponentProductions")
                        .HasForeignKey("ProductionLotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComponentLot");

                    b.Navigation("ProductionLot");
                });

            modelBuilder.Entity("Modulap.Models.Estimate", b =>
                {
                    b.HasOne("Modulap.Models.ChickenCoop", "ChickenCoop")
                        .WithMany("Estimates")
                        .HasForeignKey("ChickenCoopId");

                    b.HasOne("Modulap.Models.AppUser", "Client")
                        .WithMany("Estimates")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChickenCoop");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Modulap.Models.Message", b =>
                {
                    b.HasOne("Modulap.Models.AppUser", "Administrator")
                        .WithMany("MessagesAsAdministrators")
                        .HasForeignKey("AdministratorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Modulap.Models.ChickenCoop", "ChickenCoop")
                        .WithMany("Messages")
                        .HasForeignKey("ChickenCoopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modulap.Models.AppUser", "Client")
                        .WithMany("MessagesAsClients")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Modulap.Models.Message", "ParentMessage")
                        .WithMany("ChildMessages")
                        .HasForeignKey("ParentMessageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Administrator");

                    b.Navigation("ChickenCoop");

                    b.Navigation("Client");

                    b.Navigation("ParentMessage");
                });

            modelBuilder.Entity("Modulap.Models.ProductionLot", b =>
                {
                    b.HasOne("Modulap.Models.Recipe", "Recipe")
                        .WithMany("ProductionLots")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Modulap.Models.Qualification", b =>
                {
                    b.HasOne("Modulap.Models.ChickenCoop", "ChickenCoop")
                        .WithMany("Qualifications")
                        .HasForeignKey("ChickenCoopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modulap.Models.AppUser", "Client")
                        .WithMany("QualificationsAsClients")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChickenCoop");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Modulap.Models.Recipe", b =>
                {
                    b.HasOne("Modulap.Models.ChickenCoop", "ChickenCoop")
                        .WithMany("Recipes")
                        .HasForeignKey("ChickenCoopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChickenCoop");
                });

            modelBuilder.Entity("Modulap.Models.RecipeDetail", b =>
                {
                    b.HasOne("Modulap.Models.Component", "Component")
                        .WithMany("RecipeDetails")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modulap.Models.Recipe", "Recipe")
                        .WithMany("RecipeDetail")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Modulap.Models.Sale", b =>
                {
                    b.HasOne("Modulap.Models.Estimate", "Estimate")
                        .WithMany("Sales")
                        .HasForeignKey("EstimateId");

                    b.HasOne("Modulap.Models.AppUser", "User")
                        .WithMany("Sales")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Estimate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Modulap.Models.SaleDetail", b =>
                {
                    b.HasOne("Modulap.Models.ChickenCoop", "ChickenCoop")
                        .WithMany("SaleDetail")
                        .HasForeignKey("ChickenCoopId");

                    b.HasOne("Modulap.Models.Sale", "Sale")
                        .WithMany("SaleDetails")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChickenCoop");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Modulap.Models.SupplierPayment", b =>
                {
                    b.HasOne("Modulap.Models.ComponentLot", "ComponentLot")
                        .WithMany("SupplierPayments")
                        .HasForeignKey("ComponentLotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Modulap.Models.Supplier", "Supplier")
                        .WithMany("SuppliersPayments")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ComponentLot");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Modulap.Models.AppUser", b =>
                {
                    b.Navigation("BuysAdmins");

                    b.Navigation("Estimates");

                    b.Navigation("MessagesAsAdministrators");

                    b.Navigation("MessagesAsClients");

                    b.Navigation("QualificationsAsClients");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Modulap.Models.Buys", b =>
                {
                    b.Navigation("ComponentLots");
                });

            modelBuilder.Entity("Modulap.Models.ChickenCoop", b =>
                {
                    b.Navigation("Estimates");

                    b.Navigation("Messages");

                    b.Navigation("Qualifications");

                    b.Navigation("Recipes");

                    b.Navigation("SaleDetail");
                });

            modelBuilder.Entity("Modulap.Models.Component", b =>
                {
                    b.Navigation("ComponentLosses");

                    b.Navigation("ComponentLots");

                    b.Navigation("RecipeDetails");
                });

            modelBuilder.Entity("Modulap.Models.ComponentLoss", b =>
                {
                    b.Navigation("ComponentCostings");
                });

            modelBuilder.Entity("Modulap.Models.ComponentLot", b =>
                {
                    b.Navigation("ComponentCostings");

                    b.Navigation("ComponentProductions");

                    b.Navigation("SupplierPayments");
                });

            modelBuilder.Entity("Modulap.Models.ComponentProduction", b =>
                {
                    b.Navigation("ComponentCostings");
                });

            modelBuilder.Entity("Modulap.Models.Estimate", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Modulap.Models.Message", b =>
                {
                    b.Navigation("ChildMessages");
                });

            modelBuilder.Entity("Modulap.Models.ProductionLot", b =>
                {
                    b.Navigation("ComponentProductions");
                });

            modelBuilder.Entity("Modulap.Models.Recipe", b =>
                {
                    b.Navigation("ProductionLots");

                    b.Navigation("RecipeDetail");
                });

            modelBuilder.Entity("Modulap.Models.RecipeDetail", b =>
                {
                    b.Navigation("ComponentCostings");
                });

            modelBuilder.Entity("Modulap.Models.Sale", b =>
                {
                    b.Navigation("SaleDetails");
                });

            modelBuilder.Entity("Modulap.Models.Supplier", b =>
                {
                    b.Navigation("ComponentLots");

                    b.Navigation("SuppliersPayments");
                });
#pragma warning restore 612, 618
        }
    }
}
